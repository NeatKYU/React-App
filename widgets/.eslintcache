[{"C:\\Users\\2066a\\React-App\\widgets\\src\\components\\Search.js":"1","C:\\Users\\2066a\\React-App\\widgets\\src\\components\\Dropdown.js":"2","C:\\Users\\2066a\\React-App\\widgets\\src\\App.js":"3","C:\\Users\\2066a\\React-App\\widgets\\src\\components\\Accordion.js":"4","C:\\Users\\2066a\\React-App\\widgets\\src\\components\\Translate.js":"5","C:\\Users\\2066a\\React-App\\widgets\\src\\components\\Convert.js":"6"},{"size":4340,"mtime":1609227565287,"results":"7","hashOfConfig":"8"},{"size":2870,"mtime":1609314111225,"results":"9","hashOfConfig":"8"},{"size":1471,"mtime":1609317051121,"results":"10","hashOfConfig":"8"},{"size":1389,"mtime":1609132483098,"results":"11","hashOfConfig":"8"},{"size":1199,"mtime":1609317057664,"results":"12","hashOfConfig":"8"},{"size":602,"mtime":1609317675330,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"q57l84",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\2066a\\React-App\\widgets\\src\\components\\Search.js",["29"],"import react, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Search = () => {\r\n    const [term, setTerm] = useState('');\r\n    const [debouncedTerm, setDebouncedTerm] = useState(term);\r\n    const [result, setResult] = useState([]);\r\n\r\n    //console.log(result);\r\n\r\n    // useEffect내에서 return이 어떻게 동작하는지 설명\r\n    // 1. 일단 전체 useEffect의 에로우함수가 실행됨\r\n    // 2. return 에로우 함수가 실행됨\r\n    // 3. 다시 실행하면 위의 1,2 반복\r\n    // 결과적으론 execute! 나오고 가만히 있다가 다시 useEffect발동하면\r\n    // 그때 return 에로우함수가 반환되어 나타남\r\n    // 유데미 react강의 165번 참고\r\n    /* \r\n    useEffect(() => {\r\n        console.log('execute!');\r\n\r\n        return (() => {\r\n\r\n        })\r\n    }, []);\r\n    */\r\n\r\n    // update되는 변수를 제대로 만들기위해 나눔\r\n    useEffect(() => {\r\n        // 0.5초 뒤에 setDebouncedTerm를 실행하는데\r\n        // 사용자가 0.5초 안에 입력을 또 하면 set작동 x\r\n        const timeoutId = setTimeout(() => {\r\n            setDebouncedTerm(term)\r\n        }, 500);\r\n\r\n        return () => {\r\n            clearTimeout(timeoutId)\r\n        }\r\n    }, [term]);\r\n\r\n    useEffect(() => {\r\n        // useEffect안에서 비동기 처리법 3가지\r\n        // 1.\r\n        const search = async () => {\r\n            const { data } = await axios.get('https://ko.wikipedia.org/w/api.php', {\r\n                params: {\r\n                    action: 'query',\r\n                    list: 'search',\r\n                    origin: '*',\r\n                    format: 'json',\r\n                    srsearch: debouncedTerm,\r\n                }\r\n            });\r\n            \r\n            setResult(data.query.search);\r\n            //console.log(result);\r\n        };\r\n        // 빈 문자열이면 search가 undefind떠서 에러남 그래서 if문으로 걸러줌\r\n        if(debouncedTerm){\r\n            search();\r\n        }\r\n        // ############################################\r\n        // ############### 여기가 중요 #################\r\n        // ############################################\r\n        /*  \r\n        if(term && !result.length){\r\n            search();\r\n        } else {\r\n            const timeoutId = setTimeout(() => {\r\n                if(term){\r\n                    search();\r\n                }\r\n            }, 500);\r\n    \r\n            return () => {\r\n                clearTimeout(timeoutId)\r\n            }\r\n        }\r\n        */\r\n        \r\n        // ############################################\r\n        \r\n        // 전문적인 프로젝트에서 자주 쓰는법\r\n        // 2.\r\n        /* \r\n        (async ()  => {\r\n            await axios.get(\"~~\");\r\n        })();\r\n        */\r\n        //1번 제일 많이 쓴데\r\n    }, [debouncedTerm]);\r\n\r\n    // 결과값 mapping\r\n    const renderedResult = result.map((result) => {\r\n        \r\n        // dangerouslySetInnerHTML은 API사용시 javascipt를 제거해줌?\r\n        // 제거하지않으면 xss공격 받기 쉬움\r\n        return (\r\n            <div key={result.pageid} className=\"item\">\r\n                <div className=\"right floated content\">\r\n                    <a \r\n                        className=\"ui button\"\r\n                        href={`https://ko.wikipedia.org?curid=${result.pageid}`}\r\n                    >\r\n                        GO\r\n                    </a>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <div className=\"header\">\r\n                        {result.title}\r\n                    </div>\r\n                    <span dangerouslySetInnerHTML={{ __html: result.snippet }}></span>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"ui form\">\r\n                <div className=\"field\">\r\n                    <label>Enter Search Term</label>\r\n                    <input \r\n                        value={term}\r\n                        onChange={e => setTerm(e.target.value)}\r\n                        className=\"input\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"ui celled list\">\r\n                {renderedResult}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;",["30","31"],"C:\\Users\\2066a\\React-App\\widgets\\src\\components\\Dropdown.js",[],"C:\\Users\\2066a\\React-App\\widgets\\src\\App.js",["32","33","34","35"],"C:\\Users\\2066a\\React-App\\widgets\\src\\components\\Accordion.js",[],"C:\\Users\\2066a\\React-App\\widgets\\src\\components\\Translate.js",[],"C:\\Users\\2066a\\React-App\\widgets\\src\\components\\Convert.js",["36","37"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Convert = ({ language, text }) => {\r\n    useEffect(() => {\r\n        const response = axios.post('https://translation.googleapis.com/language/translate/v2', {}, {\r\n            params: {\r\n                q: text, //번역할 문자열\r\n                target: language.value, // 어떤 언어로 번역할 것인가\r\n                key: 'AIzaSyCHUCmpR7cT_yDFHC98CZJy2LTms-IwDlM', // google Translate API key\r\n            }\r\n        })\r\n    }, [language, text])\r\n    return <div></div>\r\n}\r\n\r\nexport default Convert;",{"ruleId":"38","severity":1,"message":"39","line":1,"column":8,"nodeType":"40","messageId":"41","endLine":1,"endColumn":13},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":8,"nodeType":"40","messageId":"41","endLine":1,"endColumn":13},{"ruleId":"38","severity":1,"message":"46","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":17},{"ruleId":"38","severity":1,"message":"47","line":7,"column":7,"nodeType":"40","messageId":"41","endLine":7,"endColumn":12},{"ruleId":"48","severity":1,"message":"49","line":37,"column":1,"nodeType":"50","endLine":59,"endColumn":3},{"ruleId":"38","severity":1,"message":"51","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":25},{"ruleId":"38","severity":1,"message":"52","line":6,"column":15,"nodeType":"40","messageId":"41","endLine":6,"endColumn":23},"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","no-native-reassign",["53"],"no-negated-in-lhs",["54"],"'Accordion' is defined but never used.","'items' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]